/******************************************************************************
Finite State Machine
Project: fsm.dot
Description: C_CNC

Generated by gv_fsm ruby gem, see https://rubygems.org/gems/gv_fsm
gv_fsm version 0.2.8
Generation date: 2020-11-27 13:42:33 +0100
Generated from: fsm.dot
The finite state machine has:
  7 states
  1 transition functions
******************************************************************************/

#ifndef FSM_H
#define FSM_H
#include <stdlib.h>
#include <machine.h>
#include "program.h"

// State data object
// By default set to void; override this typedef or load the proper
// header if you need
typedef struct {
  int argc;
  char **argv;
  struct machine *machine;
  program_t *program; 
  data_t block_time;
  data_t total_time; 
} state_data_t;

// NOTHING SHALL BE CHANGED AFTER THIS LINE!

// List of states
typedef enum {
  STATE_INIT = 0,  
  STATE_IDLE,  
  STATE_LOAD_BLOCK,  
  STATE_STOP,  
  STATE_RAPID_MOVE,  
  STATE_LINEAR_MOVE,  
  STATE_NO_MOVE,  
  NUM_STATES,
  NO_CHANGE
} state_t;

// State human-readable names
extern const char *state_names[];

// State function and state transition prototypes
typedef state_t state_func_t(state_data_t *data);
typedef void transition_func_t(state_data_t *data);

// State functions

// Function to be executed in state init
// valid return states: STATE_IDLE
state_t do_init(state_data_t *data);

// Function to be executed in state idle
// valid return states: NO_CHANGE, STATE_IDLE, STATE_LOAD_BLOCK, STATE_STOP
state_t do_idle(state_data_t *data);

// Function to be executed in state load_block
// valid return states: STATE_IDLE, STATE_RAPID_MOVE, STATE_LINEAR_MOVE, STATE_NO_MOVE, STATE_STOP
state_t do_load_block(state_data_t *data);

// Function to be executed in state stop
// valid return states: NO_CHANGE
state_t do_stop(state_data_t *data);

// Function to be executed in state rapid_move
// valid return states: NO_CHANGE, STATE_IDLE, STATE_LOAD_BLOCK, STATE_RAPID_MOVE, STATE_STOP
state_t do_rapid_move(state_data_t *data);

// Function to be executed in state linear_move
// valid return states: NO_CHANGE, STATE_IDLE, STATE_LOAD_BLOCK, STATE_LINEAR_MOVE, STATE_STOP
state_t do_linear_move(state_data_t *data);

// Function to be executed in state no_move
// valid return states: STATE_LOAD_BLOCK
state_t do_no_move(state_data_t *data);


// List of state functions
extern state_func_t *const state_table[NUM_STATES];


// Transition functions
void reset(state_data_t *data);

// Table of transition functions
extern transition_func_t *const transition_table[NUM_STATES][NUM_STATES];

// state manager
state_t run_state(state_t cur_state, state_data_t *data);

#endif
